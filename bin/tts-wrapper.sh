#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./bin/tts-wrapper.sh [--fast|--quality] "—Ç–µ–∫—Å—Ç" output.wav [reference.wav]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç bin/)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ WAV
convert_to_wav() {
  local input_file="$1"
  local output_file="$2"

  echo "üîÑ Converting $input_file to WAV format..."

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ tts –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  docker exec distributter-tts ffmpeg -i "/app/shared/$input_file" -ar 22050 -ac 1 -acodec pcm_s16le "/app/shared/$output_file" -y 2>/dev/null

  if [ $? -eq 0 ]; then
    echo "‚úÖ Conversion successful: $output_file"
    return 0
  else
    echo "‚ùå Conversion failed"
    return 1
  fi
}

FAST_MODE=false
TEXT=""
OUTPUT=""
REFERENCE=""
INPUT_FILE=""
USE_ACCENTS=true     # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–¥–∞—Ä–µ–Ω–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ TTS

# –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
while [[ $# -gt 0 ]]; do
  case $1 in
    --fast|-f)
      FAST_MODE=true
      shift
      ;;
    --quality|-q)
      FAST_MODE=false
      shift
      ;;
    --file|--input-file)
      INPUT_FILE="$2"
      shift 2
      ;;
    --no-accents)
      USE_ACCENTS=false
      shift
      ;;
    --help|-h)
      echo "TTS Wrapper Script"
      echo "Usage: $0 [OPTIONS] TEXT|--file FILE OUTPUT_FILE [REFERENCE_VOICE]"
      echo ""
      echo "Options:"
      echo "  --fast, -f           Use fast TTS (Google TTS)"
      echo "  --quality, -q        Use quality TTS (Coqui XTTS v2)"
      echo "  --file FILE          Read text from file instead of command line"
      echo "  --input-file FILE    Same as --file"
      echo "  --no-accents         Disable automatic accent placement for quality TTS"
      echo "  --help, -h           Show this help"
      echo ""
      echo "Examples:"
      echo "  $0 --fast \"–ü—Ä–∏–≤–µ—Ç –º–∏—Ä\" output.wav"
      echo "  $0 --quality \"–ú–æ–ª–æ–∫–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ\" output.wav reference.wav"
      echo "  $0 --quality --file creativity/text.txt output.wav reference.wav"
      echo "  $0 --fast --file message.txt audio.wav"
      echo "  $0 --quality --no-accents \"–¢–µ–∫—Å—Ç –±–µ–∑ —É–¥–∞—Ä–µ–Ω–∏–π\" output.wav reference.wav"
      exit 0
      ;;
    --*)
      echo "‚ùå Unknown option: $1"
      echo "Use --help for available options"
      exit 1
      ;;
    *)
      if [ -z "$TEXT" ] && [ -z "$INPUT_FILE" ]; then
        TEXT="$1"
      elif [ -z "$OUTPUT" ]; then
        OUTPUT="$1"
      elif [ -z "$REFERENCE" ]; then
        REFERENCE="$1"
      fi
      shift
      ;;
  esac
done

# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª, —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ
if [ -n "$INPUT_FILE" ]; then
  # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –∏—â–µ–º –≤ shared/
  if [[ "$INPUT_FILE" != /* && "$INPUT_FILE" != ./* && "$INPUT_FILE" != shared/* ]]; then
    INPUT_FILE_PATH="$PROJECT_DIR/shared/$INPUT_FILE"
    echo "üîç Looking for file in shared/: $INPUT_FILE"
  elif [[ "$INPUT_FILE" == shared/* ]]; then
    INPUT_FILE_PATH="$PROJECT_DIR/$INPUT_FILE"
  else
    INPUT_FILE_PATH="$INPUT_FILE"
  fi

  if [ ! -f "$INPUT_FILE_PATH" ]; then
    echo "‚ùå Input file not found: $INPUT_FILE"
    echo "   Checked location: $INPUT_FILE_PATH"
    exit 1
  fi

  TEXT=$(cat "$INPUT_FILE_PATH")
  if [ -z "$TEXT" ]; then
    echo "‚ùå Input file is empty: $INPUT_FILE_PATH"
    exit 1
  fi
  echo "üìÑ Reading text from file: $INPUT_FILE_PATH"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if [ -z "$TEXT" ] || [ -z "$OUTPUT" ]; then
  echo "Error: TEXT (or --file) and OUTPUT_FILE are required"
  echo "Use --help for usage information"
  exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∫–æ–º–∞–Ω–¥—É
if [ "$FAST_MODE" = true ]; then
  echo "üöÄ Using FAST TTS (Google TTS)..."
  docker exec distributter-tts quick-tts "$TEXT" "/app/shared/$OUTPUT"
else
  echo "üéØ Using QUALITY TTS (Coqui XTTS v2)..."
  if [ -z "$REFERENCE" ]; then
    echo "Error: Reference voice file is required for quality TTS"
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å shared/ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if [ ! -f "$PROJECT_DIR/shared/$REFERENCE" ] && [ ! -f "$REFERENCE" ]; then
    echo "‚ùå Reference file not found: $REFERENCE"
    echo "   Checked locations:"
    echo "   - $PROJECT_DIR/shared/$REFERENCE"
    echo "   - $REFERENCE"
    exit 1
  fi

  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ shared/, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
  if [ -f "$PROJECT_DIR/shared/$REFERENCE" ]; then
    REFERENCE_PATH="$REFERENCE"
    echo "üìÅ Found reference file: shared/$REFERENCE"
  else
    # –§–∞–π–ª —É–∫–∞–∑–∞–Ω —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
    REFERENCE_PATH=$(basename "$REFERENCE")
    echo "üìÅ Using reference file: $REFERENCE"
  fi

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  REFERENCE_WAV="$REFERENCE_PATH"
  REFERENCE_EXT="${REFERENCE_PATH##*.}"
  REFERENCE_EXT=$(echo "$REFERENCE_EXT" | tr '[:upper:]' '[:lower:]')

  if [ "$REFERENCE_EXT" != "wav" ]; then
    echo "üîç Detected non-WAV reference file: $REFERENCE_PATH (.$REFERENCE_EXT)"

    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    REFERENCE_BASE="${REFERENCE_PATH%.*}"
    REFERENCE_WAV="${REFERENCE_BASE}_converted.wav"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω–≤ÔøΩÔøΩ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    if [ -f "$PROJECT_DIR/shared/$REFERENCE_WAV" ]; then
      echo "üìÅ Found existing converted file: $REFERENCE_WAV"
    else
      # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
      if ! convert_to_wav "$REFERENCE_PATH" "$REFERENCE_WAV"; then
        echo "‚ùå Failed to convert reference file to WAV"
        exit 1
      fi
    fi

    echo "üéµ Using converted reference: $REFERENCE_WAV"
  else
    echo "üéµ Using WAV reference: $REFERENCE_WAV"
  fi

  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ TTS
  PROCESSED_TEXT="$TEXT"

  if [ "$USE_ACCENTS" = true ]; then
    echo "üìù Processing text with accent placement..."

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ my_ruaccent
    PROCESSED_TEXT=$(docker exec distributter-tts my_ruaccent "$TEXT")

    if [ $? -eq 0 ] && [ -n "$PROCESSED_TEXT" ]; then
      echo "‚úÖ Accents placed: $PROCESSED_TEXT"
    else
      echo "‚ö†Ô∏è Accent placement failed, using original text"
      PROCESSED_TEXT="$TEXT"
    fi
  else
    echo "üìù Using original text without accent placement..."
    PROCESSED_TEXT="$TEXT"
  fi

  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  echo "$PROCESSED_TEXT" > "$PROJECT_DIR/shared/temp_text.txt"

  # –ó–∞–ø—É—Å–∫–∞–µ–º Coqui TTS —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ—Ñ–µÔøΩÔøΩ–µ–Ω—Å–æ–º
  docker exec distributter-tts bash -c "echo 'y' | tts --text \"\$(cat /app/shared/temp_text.txt)\" --model_name tts_models/multilingual/multi-dataset/xtts_v2 --language_idx ru --speaker_wav /app/shared/$REFERENCE_WAV --out_path /app/shared/$OUTPUT"

  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  rm -f "$PROJECT_DIR/shared/temp_text.txt"
fi

echo "‚úÖ Audio generated: $OUTPUT"
